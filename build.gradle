buildscript {
    ext {
        dynamicJarNames = [""]
        isMatchAny = { name -> dynamicJarNames.contains(name) }
        repos = ["http://maven.aliyun.com/nexus/content/groups/public", "https://jcenter.bintray.com/"]
    }
    repositories {
        for (String u : repos) {
            maven { url = u }
        }
    }
    dependencies {
        classpath("org.springframework:springloaded:1.2.8.RELEASE")
    }
}
plugins {
    id("org.jetbrains.kotlin.plugin.spring") version "1.2.50"
    id("org.jetbrains.kotlin.plugin.jpa") version "1.2.50"
    id("org.jetbrains.kotlin.jvm") version "1.2.50"
    id("org.jetbrains.kotlin.kapt") version "1.2.50"
    id("net.researchgate.release") version "2.7.0"
    id("org.springframework.boot") version "2.0.3.RELEASE"
}
apply plugin: "idea"
apply plugin: 'io.spring.dependency-management'
idea {
    module {
        inheritOutputDirs = false
        outputDir = file("$buildDir/classes/kotlin/main/")
        testOutputDir = file("$buildDir/classes/kotlin/test/")
    }
}

repositories {
    for (String u : repos) {
        maven { url = u }
    }
}

configurations { dynamic }
ext["kotlin.version"] = "1.2.50"
ext["coroutineVersion"] = "0.23.1"
ext["shiroVersion"] = "1.4.0"
dependencies {
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutineVersion")
    compile("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$coroutineVersion")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-cache")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-devtools")
    compile("com.querydsl:querydsl-jpa")
    compile("com.fasterxml.jackson.module:jackson-module-kotlin")
    compile("org.apache.shiro:shiro-spring-boot-web-starter:$shiroVersion")
    compile("org.apache.shiro:shiro-hazelcast:$shiroVersion")
    compile("com.hazelcast:hazelcast-hibernate52:1.2.3")
    compile("com.hazelcast:hazelcast-spring")
    compile dynamic("com.h2database:h2")
    compile dynamic("mysql:mysql-connector-java")
    kapt("com.querydsl:querydsl-apt:4.1.4:jpa")
    testCompile("org.apache.ant:ant:1.10.1")
    testCompile("org.dbunit:dbunit:2.5.4")
    testCompile("org.springframework.boot:spring-boot-starter-test") {
        exclude module: "junit"
    }
    testCompile("org.junit.jupiter:junit-jupiter-api")
    testRuntime("org.junit.jupiter:junit-jupiter-engine")
    configurations.dynamic.each { dynamicJarNames.push(it.name) }
}

task copyToLib(type: Copy) {
    into "$buildDir/libs/lib"
    from configurations.runtime
    exclude '*spring-boot-devtools*.jar'
    exclude { isMatchAny(it.file.name) }
    outputs.upToDateWhen { true }
}

task copyToLibDynamic(type: Copy) {
    into "$buildDir/libs/lib-dynamic"
    from configurations.runtime
    exclude { !isMatchAny(it.file.name) }
    outputs.upToDateWhen { true }
}

jar {
    enabled = true
    archiveName = "${project.name}.jar"
    manifest {
        attributes(
                'Main-Class': 'org.appsugar.archetypes.ApplicationKt', 'Class-Path': configurations.runtime.collect {
            (isMatchAny(it.getName()) ? 'lib-dynamic/' : 'lib/') + it.getName()
        }.join(' '))
    }
    dependsOn copyToLib, copyToLibDynamic
}
springBoot { buildInfo() }
bootJar { classifier = 'boot' }//set boot jar different name
bootRun { sourceResources sourceSets.main } //enable spring dev tools scan resource directory
kotlin { experimental.coroutines = 'enable' }//enable coroutine
tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions { jvmTarget = "1.8" }
}
kapt { useBuildCache = true }

test {
    useJUnitPlatform()
    failFast = true
    systemProperties["refreshDb"] = true
    systemProperties["spring.jpa.hibernate.ddl-auto"] = "create-drop"
}