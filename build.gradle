buildscript {
	ext.loadGroovyConfig={ p ->
		if(p == null){return new java.util.HashMap()}
		def configFile = file("environment.groovy")
		def profileObject = new ConfigSlurper(p).parse(configFile.toURL()).toProperties()
		if(profileObject.isEmpty()){throw new InvalidUserDataException("profile not found name is "+p)}
		return profileObject
	}
	ext{
		env = loadGroovyConfig("base")
		env.putAll(loadGroovyConfig(System.getProperty("profile")))
		env.putAll(System.properties)
	}
	repositories {
		maven{url "http://maven.aliyun.com/nexus/content/groups/public"}
		maven{url "http://nexus.ggxueche.cn/nexus/content/groups/public/"}
		jcenter()
		maven{url "https://repo.spring.io/milestone"}
	}
	dependencies{
		classpath ("org.springframework:springloaded:1.2.8.RELEASE")
		classpath ("org.springframework.boot:spring-boot-gradle-plugin:2.0.0.M6")
		classpath ("org.junit.platform:junit-platform-gradle-plugin:1.0.1")
		classpath ("io.github.divinespear:jpa-schema-gradle-plugin:0.2.4.3-SNAPSHOT")
		classpath ("com.ferigma:dbunit-gradle-plugin:0.1.0")
		classpath ("com.h2database:h2:1.4.196")
		classpath ("org.springframework:spring-context:5.0.0.RELEASE")//fix generateSchema  get classload error
	}
}

plugins {
    id ("org.jetbrains.kotlin.plugin.spring")  version "1.1.61"
    id ("org.jetbrains.kotlin.plugin.jpa") version "1.1.61"
    id ("org.jetbrains.kotlin.jvm") version "1.1.61"
	id ("io.spring.dependency-management") version "1.0.3.RELEASE"
}

apply plugin: "org.springframework.boot"
apply plugin: "org.junit.platform.gradle.plugin"
apply plugin: "jpa-schema-generate"
apply plugin: "dbunit"



repositories {
   maven{url "http://maven.aliyun.com/nexus/content/groups/public"}
   maven{url "http://nexus.ggxueche.cn/nexus/content/groups/public/"}
   maven{url "http://repo.spring.io/milestone"}
}


ext {
	shiroVersion = "1.4.0"
}
ext["kotlin.version"]="1.1.61"
dependencies {
    compile ("org.jetbrains.kotlinx:kotlinx-coroutines-core:0.19.3")
    compile ("org.jetbrains.kotlin:kotlin-stdlib-jre8")
	compile ("org.jetbrains.kotlin:kotlin-reflect")
    compile ("org.springframework.boot:spring-boot-starter-web")
	compile ("org.springframework.boot:spring-boot-starter-data-jpa")
	compile ("org.springframework.boot:spring-boot-starter-thymeleaf")
	compile ("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect")
	compile ("org.springframework.boot:spring-boot-devtools")
	compile ("org.appsugar:appsugar-bean:2.4.4-SNAPSHOT")
	compile ("${env["jdbc.groupId"]}:${env["jdbc.artifactId"]}:${env["jdbc.version"]}")
	compile ("org.apache.shiro:shiro-spring:${shiroVersion}")
	compile ("org.apache.shiro:shiro-web:${shiroVersion}")
	testCompile("org.springframework.boot:spring-boot-starter-test") {
		 exclude module: "junit" 
	}
	testCompile("${env["test.jdbc.groupId"]}:${env["test.jdbc.artifactId"]}:${env["test.jdbc.version"]}")
	testCompile("org.junit.jupiter:junit-jupiter-api")
	testRuntime("org.junit.jupiter:junit-jupiter-engine")
}


bootRun{
	sourceResources sourceSets.main
}


generateSchema {
	vendor = "hibernate"
	databaseAction = "drop-and-create"
	scriptAction = "drop-and-create"
	packageToScan = [project.group]
	jdbcDriver = env["test.jdbc.driverClassName"]
	jdbcUrl = env["test.jdbc.url"]
	jdbcUser = env["test.jdbc.username"]
	jdbcPassword = env["test.jdbc.password"]
	properties = ["hibernate.dialect":env["test.hibernate.dialect"], "hibernate.physical_naming_strategy":"org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy"]
}

dbunit {
	username = env["test.jdbc.username"]
	password = env["test.jdbc.password"]
	url = env["test.jdbc.url"]
	driver = env["test.jdbc.driverClassName"]
	dataTypeFactoryName  = env["test.dbunit.dataTypeFactoryName"]
}

task populateTestDb(type: com.ferigma.gradle.dbunit.tasks.OperationTask,dependsOn : "generateSchema") {
	sources = [
			new com.ferigma.gradle.dbunit.tasks.source.OperationSource(
					transaction: true, type:env["test.dbunit.operationType"], format: "flat",
					file: "$projectDir"+env["test.dbunit.sampleData"])
	]
}
junitPlatformTest.dependsOn populateTestDb


kotlin { 
    experimental.coroutines = 'enable'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
	kotlinOptions {
		jvmTarget = "1.8"
	}
}
